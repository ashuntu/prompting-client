name: apparmor_prompting

packages:
  - flutter_packages/**

command:
  bootstrap:
    environment:
      sdk: ">=3.4.3 <4.0.0"
      flutter: ">=3.22.2"

    dev_dependencies:
      ubuntu_lints: ^0.4.0

scripts:
  # build all packages
  build: >
    melos exec -c 1 --fail-fast --flutter --dir-exists=linux -- \
      flutter build linux

  # collect coverage information for all packages
  coverage: >
    melos exec -c 1 --fail-fast --dir-exists=test -- \
      flutter test --coverage && melos run coverage:cleanup

  # cleanup generated files from coverage
  coverage:cleanup: >
    melos exec --file-exists=coverage/lcov.info -- \
      lcov --remove coverage/lcov.info \
        '**/*.freezed.dart' \
        '**/*.g.dart' \
        '**/*.mocks.dart' \
        '**/l10n/*.dart' \
        '**/*.pb*.dart' \
        -o coverage/lcov.info

  # format all packages
  format:exclude: >
    find . -name '*.dart' \
      ! -name '*.freezed.dart' \
      ! -name '*.g.dart' \
      ! -name '*.mocks.dart' \
      ! -path '*/l10n/*.dart' \
      ! -name '*.pb*.dart' \
      ! -path '*/.*/*' \
      | xargs dart format --set-exit-if-changed

  # run build_runner to generate code in all packages
  generate: >
    dart pub global run melos exec -c 1 --fail-fast --depends-on=build_runner -- \
      dart run build_runner build --delete-conflicting-outputs

  # run build_runner in the background to watch for changes in all packages
  generate-watch: >
    melos exec -c 1 --depends-on=build_runner -- \
      dart run build_runner watch -d &

  # run gen-l10n to generate localizations in all packages
  gen-l10n: >
    melos exec -c 1 --fail-fast --depends-on=flutter_localizations -- \
     flutter gen-l10n

  # run integration tests in all packages
  integration_test: >
    melos exec -c 1 --fail-fast --dir-exists=integration_test -- \
      flutter test integration_test

  # runs "flutter pub <arg(s)>" in all packages
  pub: melos exec -c 1 -- flutter pub "$@"

  # run tests in all packages
  test: >
    melos exec -c 1 --fail-fast --dir-exists=test -- \
      flutter test

  # generate protobuf files in prompting_client
  protoc:
    run: |
      rm -rf ./flutter_packages/prompting_client/lib/src/generated/* &&
      protoc --dart_out=grpc:./flutter_packages/prompting_client/lib/src/generated \
        -Iprotos protos/*.proto google/protobuf/empty.proto google/protobuf/wrappers.proto
